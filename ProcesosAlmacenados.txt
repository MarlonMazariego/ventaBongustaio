CREATE DEFINER=`root`@`localhost` PROCEDURE `spEjercicio1`(
	IN nombrex varchar(50),
    IN peso_lbx decimal(18,2)
)
BEGIN
	set @autocommit = 0;
    START TRANSACTION;
    set @c = '';
    
    set @fail = (select @@error_count);
    
    if (peso_lbx <= 50) then
		set @estado = 'No admitido';
	else
		set @estado = 'Admitido';
	end if;
    
	INSERT INTO tbPersonas (nombre, peso_lb, estado)
			VALUES (nombrex, peso_lbx, @estado);
    
    
    if @fail = 0 then
		set @c = 'Éxito';
		commit;
    else
		set @c = 'Ocurrio un error';
		rollback;
	end if;
    
    select @c Mensaje;

END


/*-----------------------------*/
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEjercicio#2p1`(
	IN nom varchar(50),
	IN ape varchar(50),
    IN dui varchar(10)
)
BEGIN

	set @autocommit = 0;
    START TRANSACTION;
    SET @fallas = 0;
    
    insert into tbClientes (nombres, apellidos, DUI)
			values (nom, ape, dui);
            
	IF @fallas = 0 then
		set @c = 'Exitoso';
        commit;
	else
		set @c = 'Fallido';
        rollback;
	end if;
    
    SELECT @c Mensaje;
    
END
/*--------------------------------------------*/
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEjercicio#2p2`(
	IN pdui varchar(10),
    IN nvoNombre varchar(50)
)
BEGIN

	set @autocommit = 0;
    START TRANSACTION;
    SET @fallas = 0;
    
    set @existencia = (select count(DUI)from tbclientes where DUI = pdui);
    
    set @id_cln := (SELECT id_cln FROM dblaboratorio.tbclientes where DUI = pdui);
    
    if  @existencia <> 0 then
		/*set SQL_SAFE_UPDATES = 0;/*DESHABILITAR MODIFICAR POR OTRO CAMPO*/
		update  dblaboratorio.tbClientes set nombres = nvoNombre where id_cln = @id_cln;
		/*set SQL_SAFE_UPDATES = 1; ACTIVARLAS NUEVAMENTE*/
       set @f = 'Cambio exitoso';
    else
		set @f = 'No existe';
	end if;
	
    IF @fallas = 0 then
		set @c = 'Exitoso';
        commit;
	else
		set @c = 'Fallido';
        rollback;
	end if;
    
    SELECT @c Mensaje, @f Finalizado;
   
    
END
/*--------------------------------*/
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEjercicio#3`(
	in nombre_cliente varchar(50),
    in cant int,
    in idp int
)
BEGIN

	set @autocommit = 0;
    START TRANSACTION;
    
    SET @fails := (select @@error_count);
    
    set @existencia := (select count(id_producto) from tbProductos where id_producto = idp limit 1);
    
    /*ESTO SERVIRIA MEJOR SI FUERA UN CÓDIGO ESPECIAL DE PRODUCTO, COMO POR EJ UNO DE BARRAS Y SI INGRESARAMOS COMPRAS*/
    set @stock := (select sum(existencia) from tbProductos where id_producto = idp); 
    
    
    IF (@existencia <> 0 and @stock >= cant) then
		
        insert into tbPedidos(cliente, cant_pedido, id_producto)
			values (nombre_cliente, cant, idp);
		
		UPDATE tbProductos SET existencia = (existencia - cant) WHERE id_producto 
		= (select id_producto from tbpedidos where id_pedido = (select max(id_pedido) as id from tbpedidos));
		
        INSERT INTO tbMovimientos (id_producto, fecha, cantidad)
			VALUES (idp, curdate(), cant);
        
        set @msj := 'Ingreso exitoso';
        
	elseif (@existencia = 0) then
		set @msj := 'No existe el producto seleccionado';
        
	elseif (@stock < cant) then
		set @msj := 'EXISTENCIA DEL PRODUCTO INSUFICIENTE';
	else 
		set @msj = 'Error ocurrido al ingresar';
	end if;
    
    
    if @fails = 0 then
		set @c = 'Éxito';
		commit;
	else
		set @c = 'Fallido';
		rollback;
	end if;
		
        select @msj Mensaje, @c Alerta;
END

/*-------------------------*/
CREATE DEFINER=`root`@`localhost` PROCEDURE `spEjercicio#4`(
	in idp int
)
BEGIN
	set @autocommit = 0;
    START TRANSACTION;
     set @existencia := (select count(id_producto) from tbProductos where id_producto = idp limit 1);
    set @falla = (select @@error_count);
    
    if (@existencia <> 0 ) then
		select id_movimiento,id_producto, fecha,  (case when (tipo_movimiento = 'Salida') then cantidad  end)Salidas,
		(case when (tipo_movimiento = 'Entrada') then cantidad end)Entradas 
		from tbMovimientos where id_producto = idp;
		
    else
		set @f = 'No hay registros';
        
	end if;
 
    
    if @falla = 0 then
    set @c = 'success';
		commit;
    else 
	set @c = 'fail';
		rollback;
	end if;

END

